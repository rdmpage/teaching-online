<?php

define('CHILD', 0);
define ('SIB', 1);

//--------------------------------------------------------------------------------------------------
function write_nexus_label($label)
{
	if (preg_match('/^(\w|\d)+$/', $label))
	{
	}
	else
	{
		str_replace ("'", "\'", $label);
		$label = "'" . $label . "'";
	}
	return $label;
}


//--------------------------------------------------------------------------------------------------
/**
 * @brief Node in a tree
 *
 * Node has pointers to child, sibling, and ancestral node, these pointers are
 * NULL if corresponding node doesn't exist. Has label as a field, all other values
 * are stored in an key-value array of attributes.
 */
class Node
{
	var $ancestor;
	var $child;
	var $sibling;
	var $label;
	var $id;
	var $attributes = array();
	var $cluster = array();
	
	//----------------------------------------------------------------------------------------------
	function __construct($label = '')
	{
		$this->ancestor = NULL;
		$this->child = NULL;
		$this->sibling = NULL;
		$this->label = $label;
		$this->cluster = array();
	}
		
	//----------------------------------------------------------------------------------------------
	function IsLeaf()
	{
		return ($this->child == NULL);
	}
	
	//----------------------------------------------------------------------------------------------
	function AddWeight($w)
	{
		$w0 = $this->GetAttribute('weight');
		$this->SetAttribute('weight', $w0 + $w);
	}
	
	//----------------------------------------------------------------------------------------------
	function Dump()
	{
		echo "---Dump Node---\n";
		echo "   Label: " . $this->label . "\n";
		echo "      Id: " . $this->id . "\n";
		echo "   Child: ";
		if ($this->child == NULL)
		{
			echo "NULL\n";
		}
		else
		{
			echo $this->child->label . "\n";
		}
		echo " Sibling: ";
		if ($this->sibling == NULL)
		{
			echo "NULL\n";
		}
		else
		{
			echo $this->sibling->label . "\n";
		}
		echo "Ancestor: ";
		if ($this->ancestor == NULL)
		{
			echo "NULL\n";
		}
		else
		{
			echo $this->ancestor->label . "\n";
		}
		echo "Attributes:\n";
		print_r($this->attributes);
		echo "Cluster:\n";
		print_r($this->cluster);
	}
	
	//----------------------------------------------------------------------------------------------
	function GetAncestor() { return $this->ancestor; }	
	
	//----------------------------------------------------------------------------------------------
	function GetAttribute($key) 
	{
		if (isset($this->attributes[$key]))
		{			
			return $this->attributes[$key];
		}
		else
		{
			return null;
		}
	}		

	//----------------------------------------------------------------------------------------------
	function GetChild() { return $this->child; }	

	//----------------------------------------------------------------------------------------------
	function GetId() { return $this->id; }	

	//----------------------------------------------------------------------------------------------
	function GetLabel() { return $this->label; }	
	
	//----------------------------------------------------------------------------------------------
	// If node is sibling get node immediately preceding it ("to the left")
	function GetLeftSibling()
	{
		$q = $this->ancestor->child;
		while ($q->sibling != $this)
		{
			$q = $q->sibling;
		}
		return $q;
	}
	
	//----------------------------------------------------------------------------------------------
	function GetRightMostSibling()
	{
		$p = $this;
		
		while ($p->sibling)
		{
			$p = $p->sibling;
		}
		return $p;
	}


	//----------------------------------------------------------------------------------------------
	function GetSibling() { return $this->sibling; }	
	
	//----------------------------------------------------------------------------------------------
	function IsChild()
	{
		$is_child = false;
		$q = $this->ancestor;
		if ($q)
		{
			$is_child = ($q->child == $this);
		}
		return $is_child;
	}
	
	//----------------------------------------------------------------------------------------------
	function SetAncestor($p)
	{
		$this->ancestor = $p;
	}
	
	//----------------------------------------------------------------------------------------------
	function SetAttribute($key, $value)
	{
		$this->attributes[$key] = $value;
	}
	
	//----------------------------------------------------------------------------------------------
	function SetChild($p)
	{
		$this->child = $p;
	}
	
	//----------------------------------------------------------------------------------------------
	function SetId($id)
	{
		$this->id = $id;
	}
	
	//----------------------------------------------------------------------------------------------
	function SetLabel($label)
	{
		$this->label = $label;
	}
	

	//----------------------------------------------------------------------------------------------
	function SetSibling($p)
	{
		$this->sibling = $p;
	}
	
	//----------------------------------------------------------------------------------------------
	// Children of node (as array)
	function GetChildren()
	{
		$children = array();
		$p = $this->child;
		if ($p)
		{
			array_push($children, $p);
			$p = $p->sibling;
			while ($p)
			{
				array_push($children, $p);
				$p = $p->sibling;
			}
		}
		return $children;
	}
	
	
}


//--------------------------------------------------------------------------------------------------
class Tree
{
	var $root;
	var $num_nodes;
	var $label_to_node_map = array();
	var $nodes = array();	
	var $num_leaves;
	var $rooted = true;
	var $has_edge_lengths = false;

	//----------------------------------------------------------------------------------------------
	function __construct()
	{
		$this->root = NULL;;
		$this->num_nodes = 0;
		$this->num_leaves = 0;
	}
	
	//----------------------------------------------------------------------------------------------
	function GetNumLeaves() { return $this->num_leaves; }
	
	
	//----------------------------------------------------------------------------------------------
	function GetRoot() { return $this->root; }

//----------------------------------------------------------------------------------------------
	function HasBranchLengths() { return $this->has_edge_lengths; }

	//----------------------------------------------------------------------------------------------
	function IsRooted() { return $this->rooted; }
	
	//----------------------------------------------------------------------------------------------
	function SetRoot($root)
	{
		$this->root = $root;
	}
	
	//----------------------------------------------------------------------------------------------
	function NodeWithLabel($label)
	{
		$p = NULL;
		if (in_array($label, $this->label_to_node_map))
		{
			$p = $this->nodes[$this->label_to_node_map[$label]];
		}
		return $p;
	}
	
	//----------------------------------------------------------------------------------------------
	function NewNode($label = '')
	{
		$node = new Node($label);
		$node->id = $this->num_nodes++;
		$this->nodes[$node->id] = $node;
		if ($label != '')
		{
			$this->label_to_node_map[$label] = $node->id;
		}
		else
		{
			/*$label = "_" . $node->id;
			$node->SetLabel($label);
			$this->label_to_node_map[$label] = $node->id;*/
		}		
		return $node;
	}
	
	//----------------------------------------------------------------------------------------------
	function Parse ($str)
	{

		$str = str_replace('\\', "", $str);
		
		$str = str_replace("(", "|(|", $str);
		$str = str_replace(")", "|)|", $str);
		$str = str_replace(",", "|,|", $str);
		$str = str_replace(":", "|:|", $str);
		$str = str_replace(";", "|;|", $str);
		$str = str_replace("||", "|", $str);
		
		$token = explode("|", $str);
		
		//print_r($token);
		
		$curnode = $this->NewNode();
		$this->root = $curnode;

		$state = 0;
		$stack = array();
		$n = count($tokens);
		
		$i = 1;
		while ($state != 99)
		{
			switch ($state)
			{
				case 0: // getname
					if (ctype_alnum($token[$i]{0}))
					{
						$this->num_leaves++;
						
						$label = $token[$i];
						
	
						// kml
						if (preg_match('/^(?<label>.*)\s*lat=(?<lat>.*)long=(?<long>.*)$/Uu', $label, $m))
						{
							$curnode->SetAttribute('lat', $m['lat']);
							$curnode->SetAttribute('long', $m['long']);
							$label = $m['label'];
						}
						
						$curnode->SetLabel($label);
						
						
						$i++;
						$state = 1;
					}
					else 
					{
						if ($token[$i]{0} == "'")
						{
							$label = $token[$i];
							$label = preg_replace("/^'/", "", $label);
							$label = preg_replace("/'$/", "", $label);
							$this->num_leaves++;
							
							
							// kml
							if (preg_match('/^(?<label>.*)\s*lat=(?<lat>.*)long=(?<long>.*)$/Uu', $label, $m))
							{
								$curnode->SetAttribute('lat', $m['lat']);
								$curnode->SetAttribute('long', $m['long']);
								$label = $m['label'];
							}
							
							$curnode->SetLabel($label);
							
							
							
							$i++;
							$state = 1;
							
						}
						else
						{
							switch ($token[$i])
							{
								case '(':
									$state = 2;
									break;
								default:
									$state = 99;
									break;
							}
						}
					}
					break;
					
				case 1: // getinternode
					switch ($token[$i])
					{
						case ':':
						case ',':
						case ')':
							$state = 2;
							break;
						default:
							$state = 99;
							break;
					}
					break;
					
				case 2: // nextmove
					switch ($token[$i])
					{
						case ':':
							$i++;
							if (is_numeric($token[$i]))
							{
								$curnode->SetAttribute('edge_length', $token[$i]);
								$this->has_edge_lengths = true;
								$i++;
							}
							break;
						case ',':
							$q = $this->NewNode();
							$curnode->SetSibling($q);
							$c = count($stack);
							if ($c == 0)
							{
								$state = 99;
							}
							else
							{
								$q->SetAncestor($stack[$c - 1]);
								$curnode = $q;
								$state = 0;
								$i++;
							}
							break;							
						case '(':
							$stack[] = $curnode;
							$q = $this->NewNode();
							$curnode->SetChild($q);
							$q->SetAncestor($curnode);
							$curnode = $q;
							$state = 0;
							$i++;
							break;
						case ')':
							if (empty($stack))
							{
								$state = 99;
							}
							else
							{
								$curnode = array_pop($stack);
								$state = 3;
								$i++;
							}
							/*
							$c = count($stack);
							if ($c == 0)
							{
								$state = 99;
							}
							else
							{
								$q = $stack[$c - 1];
								$curnode = $q;
								array_pop($stack);
								$state = 3;
								$i++;
							}*/
							break;
						
						case ';':
							if (empty($stack))
							{
								$state = 99;
							}
							else
							{
								$state = 99;
							}
							/*
							$c = count($stack);
							if ($c == 0)
							{
								$state = 99;
							}
							else
							{
								$state = 99;
							} */
							break;
						
						default:
							$state = 99;
							break;
					}
					break;
				
				case 3: // finishchildren
					if (ctype_alnum($token[$i]{0}))
					{
						$curnode->SetLabel($token[$i]);
						$i++;
					}
					else
					{
						switch ($token[$i])
						{
							case ':':
								$i++;
								if (is_numeric($token[$i]))
								{
									$curnode->SetAttribute('edge_length', $token[$i]);
									$this->has_edge_lengths = true;
									$i++;
								}
								break;
							case ')':
								$c = count($stack);
								if ($c == 0)
								{
									$state = 99;
								}
								else
								{
									$q = $stack[$c - 1];
									$curnode = $q;
									array_pop($stack);
									$i++;
								}
								break;
							case ',':
								$q = $this->NewNode();
								$curnode->SetSibling($q);
								$c = count($stack);
								if ($c == 0)
								{
									$state = 99;
								}
								else
								{
									$q->SetAncestor($stack[$c - 1]);
									$curnode = $q;
									$state = 0;
									$i++;
								}
								break;
							case ';':
								$state = 2;
								break;
							default:
								$state = 99;
								break;
						}
					}
					break;
			}
		}
						
	}		
						
	//----------------------------------------------------------------------------------------------
	function Dump()
	{
		//echo "label_to_node_map\n";
		//print_r($this->label_to_node_map);
		
		//foreach ($this->nodes as $node)
		//{
		//	echo $node->GetLabel() . "\n";
		//}
		
		echo "Num leaves = " . $this->num_leaves . "\n";
		
		$n = new NodeIterator ($this->root);
		$a = $n->Begin();
		while ($a != NULL)
		{
			//echo "Node=\n:";
			$a->Dump();
			$a = $n->Next();
		}
	}
	
	//----------------------------------------------------------------------------------------------
	function WriteDot()
	{
		$dot = "digraph{\n";
		$n = new NodeIterator ($this->root);
		$a = $n->Begin();
		while ($a != NULL)
		{
			if ($a->GetAncestor())
			{
				$dot .= "\"" . $a->GetAncestor()->GetLabel() . "\" -> \"" . $a->GetLabel() . "\";\n";
			}
			$a = $n->Next();
		}
		$dot .= "}\n";
		return $dot;
	}
		
	//----------------------------------------------------------------------------------------------
	function WriteNewick()
	{
		$newick = '';
		
		$stack = array();
		$curnode = $this->root;
		
		while ($curnode != NULL)
		{	
			if ($curnode->GetChild())
			{
				$newick .= '(';
				$stack[] = $curnode;
				$curnode = $curnode->GetChild();
			}
			else
			{
				$newick .= write_nexus_label($curnode->GetLabel());
				
				$length = $curnode->GetAttribute('edge_length');
				if ($length != '')
				{
					$newick .= ':' . $length;
				}
											
				while (!empty($stack) && ($curnode->GetSibling() == NULL))
				{
					$newick .= ')';
					$curnode = array_pop($stack);
					
					// Write internal node
					if ($curnode->GetLabel() != '')
					{
						$newick .= write_nexus_label($curnode->GetLabel());
					}
					$length = $curnode->GetAttribute('edge_length');
					if ($length != '')
					{
						$newick .= ':' . $length;
					}					

				}
				if (empty($stack))
				{
					$curnode = NULL;
				}
				else
				{
					$newick .= ',';
					$curnode = $curnode->GetSibling();
				}
			}		
		}
		$newick .= ";";
		return $newick;
	}	
			
	
	//----------------------------------------------------------------------------------------------
	// Build weights
	function BuildWeights($p)
	{
		if ($p)
		{
			$p->SetAttribute('weight', 0);
			
			$this->BuildWeights($p->GetChild());
			$this->BuildWeights($p->GetSibling());
			
			if ($p->Isleaf())
			{
				$p->SetAttribute('weight', 1);
			}
			if ($p->GetAncestor())
			{
				$p->GetAncestor()->AddWeight($p->GetAttribute('weight'));
			}
		}
	}


}

//--------------------------------------------------------------------------------------------------
/**
 * @brief
 *
 * Iterator that visits nodes in a tree in post order. Uses a stack to keep
 * track of place in tree. 
 *
 */
class NodeIterator
{
	var $root;
	var $cur;
	var $stack;
	
	//----------------------------------------------------------------------------------------------
	/**
	 * @brief Takes the root of the tree as a parameter.
	 *
     * @param r the root of the tree
	 */
	function __construct($r)
	{
		$this->root = $r;
		$this->stack = array();
		$this->cur = null;
	}
	
	//----------------------------------------------------------------------------------------------
	/**
	 * @brief Initialise iterator and returns the first node.
	 *
	 * Initialises the 
	 * @return The first node of the tree
	 */
	function Begin()
	{
		$this->cur = $this->root;
		while ($this->cur->GetChild())
		{
			array_push($this->stack, $this->cur);			
			$this->cur = $this->cur->GetChild();
		}
		return $this->cur;	
	}
	
	//----------------------------------------------------------------------------------------------
 	/**
	 * @brief Move to the next node in the tree.
	 *
	 * @return The next node in the tree, or NULL if all nodes have been visited.
	 */
	function Next()
	{
		if (count($this->stack) == 0)
		{
			$this->cur = NULL;
		}
		else
		{
			if ($this->cur->GetSibling())
			{
				$p = $this->cur->GetSibling();
				while ($p->GetChild())
				{
					array_push($this->stack, $p);
					$p = $p->GetChild();
				}
				$this->cur = $p;
			}
			else
			{
				$this->cur = array_pop($this->stack);
			}
		}
		return $this->cur;
	}
}


//--------------------------------------------------------------------------------------------------
class PreorderIterator extends NodeIterator
{
	//----------------------------------------------------------------------------------------------
	function Begin()
	{
		$this->cur = $this->root;
		return $this->cur;	
	}
	
	//----------------------------------------------------------------------------------------------
	function Next()
	{
		if ($this->cur->GetChild())
		{
			array_push($this->stack, $this->cur);
			$this->cur = $this->cur->GetChild();
		}
		else
		{
			while (!empty($this->stack)
				&& ($this->cur->GetSibling() == NULL))
			{
				$this->cur = array_pop($this->stack);
			}
			if (empty($this->stack))
			{
				$this->cur = NULL;
			}
			else
			{
				$this->cur = $this->cur->GetSibling();
			}
		}
		return $this->cur;
	}
	
}

//-------------------------------------------------------------------------------------------------
class Port
{
	var $output = '';
	var $width = 0;
	var $height = 0;
	var $element_id = 0;
	var $font_size = 10;
	
	//----------------------------------------------------------------------------------------------
	function __construct($element_id, $width, $height, $font_size=10)
	{
		$this->element_id 	= $element_id;
		$this->width 		= $width;
		$this->height 		= $height;
		$this->font_size 	= $font_size;
		$this->StartPicture();
	}
	
	//----------------------------------------------------------------------------------------------
	function Circle($pt, $r, $action = '')
	{
	}	
	
	//----------------------------------------------------------------------------------------------
	function DrawLine($p0, $p1)
	{
	}
	
	//----------------------------------------------------------------------------------------------
	function DrawText ($pt, $text, $action = '')
	{
	}
	
	//----------------------------------------------------------------------------------------------
	function GetOutput()
	{
		$this->EndPicture();
		return $this->output;
	}
	
	//----------------------------------------------------------------------------------------------
	function StartPicture ()
	{
	}

	//----------------------------------------------------------------------------------------------
	function EndPicture ()
	{
	}
	
	//----------------------------------------------------------------------------------------------
	function OpenLink($link)
	{
	}	
	//----------------------------------------------------------------------------------------------
	function CloseLink()
	{
	}	
	
	
	//----------------------------------------------------------------------------------------------
	function StartGroup($group_name, $visible=true)
	{
	}	
	
	//----------------------------------------------------------------------------------------------
	function EndGroup()
	{
	}	
	
	

}

//-------------------------------------------------------------------------------------------------
class CanvasPort extends Port
{
	
	//----------------------------------------------------------------------------------------------
	function DrawLine($p0, $p1)
	{
		$this->output .= 'context.moveTo(' . $p0['x'] . ',' . $p0['y'] . ');' . "\n";
		$this->output .= 'context.lineTo(' . $p1['x'] . ',' . $p1['y'] . ');' . "\n";
		$this->output .= 'context.stroke();' . "\n";
	}
	
	//----------------------------------------------------------------------------------------------
	function DrawText ($pt, $text, $action = '')
	{
		$this->output .= 'context.fillText("' . $text . '", ' . $pt['x'] . ', ' . $pt['y'] . ');' . "\n";
	}
	
	//----------------------------------------------------------------------------------------------
	function StartPicture ()
	{
		$this->output = '<script type="application/javascript">' . "\n";
		$this->output .= 'var paper = Raphael("' . $this->element_id . '", ' . $this->width . ', ' . $this->height . ');' . "\n";
	}
		
	
	//----------------------------------------------------------------------------------------------
	function EndPicture ()
	{
		$this->output .= '</script>';
	}
	
}

//-------------------------------------------------------------------------------------------------
class SVGPort extends Port
{

	//----------------------------------------------------------------------------------------------
	function Circle($pt, $r, $action = '')
	{
		$this->output .= '<circle ' 
				. 'cx="' .$pt['x'] . '" cy="' . $pt['y'] . '" r="' . $r . '"';
		if ($action != '')
		{
			$this->output .= ' ' . $action;
		}
		$this->output .= ' />' . "\n";
				
		
	}

		
	//----------------------------------------------------------------------------------------------
	function DrawLine($p0, $p1)
	{
		$this->output .= '<path d="M ' 
				. $p0['x'] . ' ' . $p0['y'] . ' ' . $p1['x'] . ' ' . $p1['y'] . '" />' . "\n";
	}
	
	//----------------------------------------------------------------------------------------------
	function DrawText ($pt, $text, $action = '')
	{
		$this->output .= '<text x="' . $pt['x'] . '" y="' . $pt['y'] . '"';
		if ($action != '')
		{
			$this->output .= ' ' . $action;
		}
		$this->output .= '>' . htmlentities($text) . '</text>' . "\n";
	}
	
	//----------------------------------------------------------------------------------------------
	function StartPicture()
	{
		$this->output = '<?xml version="1.0" ?>';
		$this->output = '<svg xmlns:xlink="http://www.w3.org/1999/xlink" 
	xmlns="http://www.w3.org/2000/svg"
	width="' . $this->width . 'px" 
    height="'. $this->height . 'px" 
    >' . "\n";	
    
    	$this->output .= 
'<style type="text/css">
<![CDATA[
	path {
		stroke: black;
		stroke-width:1;
		stroke-linecap:square;
	}
	text {
		alignment-baseline:middle;
		font-family:sans-serif;
		font-size: ' . $this->font_size . 'px;
	}
	text:hover {
		font-weight:bold;
		}
	circle {
		stroke: black;
		fill:white;
		opacity:0.2;
		}
	circle:hover {opacity:1.0; }
]]>
</style>' . "\n";
    	    	
    }
	
	//----------------------------------------------------------------------------------------------
	function EndPicture ()
	{
		$this->output .= '</svg>';
	}

	//----------------------------------------------------------------------------------------------
	function OpenLink($link)
	{
		$this->output .= '<a xlink:href="' . $link . '">';
	}	
	//----------------------------------------------------------------------------------------------
	function CloseLink()
	{
		$this->output .= '</a>';
	}	
	
	//----------------------------------------------------------------------------------------------
	function StartGroup($group_name, $visible=true)
	{
		$this->output .= '<g id="' . $group_name . '"';
		if ($visible)
		{
//			$this->output .= ' style="display:inline;"';
			$this->output .= ' display="inline"';
		}
		else
		{
			//$this->output .= ' style="display:none;"';
			$this->output .= ' display="none"';
		}
		$this->output .= '>' . "\n";
	}	
	
	//----------------------------------------------------------------------------------------------
	function EndGroup()
	{
		$this->output .= '</g>' . "\n";
	}		
		
	
}


//-------------------------------------------------------------------------------------------------
class RaphaelPort extends Port
{

	//----------------------------------------------------------------------------------------------
	function DrawLine($p0, $p1)
	{
		$this->output .= 'paper.path("M ' 
				. $p0['x'] . ' ' . $p0['y'] . ' ' . $p1['x'] . ' ' . $p1['y'] . '");' . "\n";
	}
	
	//----------------------------------------------------------------------------------------------
	function DrawText ($pt, $text, $action = '')
	{
		$this->output .= 'var t = paper.text(' . $pt['x'] . ', ' . $pt['y'] . ', "' . $text . '");' . "\n";
		$this->output .= 't.attr("text-anchor", "start");' . "\n";
		//$this->output .= 't.attr("fill", "red");' . "\n";
		$this->output .= 't.mouseover(function (event) {
    this.attr({fill: "red"});
	});' . "\n";
		$this->output .= 't.mouseout(function (event) {
    this.attr({fill: "black"});
	});' . "\n";
	}
	
	//----------------------------------------------------------------------------------------------
	function Circle($pt, $r, $action = '')
	{
		$this->output .= 'paper.circle(' 
				. $pt['x'] . ', ' . $pt['y'] . ', ' . $r . ');' . "\n";
	
	}
	
	//----------------------------------------------------------------------------------------------
	function StartPicture ()
	{
		$this->output = '<script type="application/javascript">' . "\n";
		$this->output .= 'var paper = Raphael("' . $this->element_id . '", ' . $this->width . ', ' . $this->height . ');' . "\n";

		// Earth icon see http://raphaeljs.com/icons/
		//$this->output .= 'paper.path("M16,1.466C7.973,1.466,1.466,7.973,1.466,16c0,8.027,6.507,14.534,14.534,14.534c8.027,0,14.534-6.507,14.534-14.534C30.534,7.973,24.027,1.466,16,1.466zM27.436,17.39c0.001,0.002,0.004,0.002,0.005,0.004c-0.022,0.187-0.054,0.37-0.085,0.554c-0.015-0.012-0.034-0.025-0.047-0.036c-0.103-0.09-0.254-0.128-0.318-0.115c-0.157,0.032,0.229,0.305,0.267,0.342c0.009,0.009,0.031,0.03,0.062,0.058c-1.029,5.312-5.709,9.338-11.319,9.338c-4.123,0-7.736-2.18-9.776-5.441c0.123-0.016,0.24-0.016,0.28-0.076c0.051-0.077,0.102-0.241,0.178-0.331c0.077-0.089,0.165-0.229,0.127-0.292c-0.039-0.064,0.101-0.344,0.088-0.419c-0.013-0.076-0.127-0.256,0.064-0.407s0.394-0.382,0.407-0.444c0.012-0.063,0.166-0.331,0.152-0.458c-0.012-0.127-0.152-0.28-0.24-0.318c-0.09-0.037-0.28-0.05-0.356-0.151c-0.077-0.103-0.292-0.203-0.368-0.178c-0.076,0.025-0.204,0.05-0.305-0.015c-0.102-0.062-0.267-0.139-0.33-0.189c-0.065-0.05-0.229-0.088-0.305-0.088c-0.077,0-0.065-0.052-0.178,0.101c-0.114,0.153,0,0.204-0.204,0.177c-0.204-0.023,0.025-0.036,0.141-0.189c0.113-0.152-0.013-0.242-0.141-0.203c-0.126,0.038-0.038,0.115-0.241,0.153c-0.203,0.036-0.203-0.09-0.076-0.115s0.355-0.139,0.355-0.19c0-0.051-0.025-0.191-0.127-0.191s-0.077-0.126-0.229-0.291c-0.092-0.101-0.196-0.164-0.299-0.204c-0.09-0.579-0.15-1.167-0.15-1.771c0-2.844,1.039-5.446,2.751-7.458c0.024-0.02,0.048-0.034,0.069-0.036c0.084-0.009,0.31-0.025,0.51-0.059c0.202-0.034,0.418-0.161,0.489-0.153c0.069,0.008,0.241,0.008,0.186-0.042C8.417,8.2,8.339,8.082,8.223,8.082S8.215,7.896,8.246,7.896c0.03,0,0.186,0.025,0.178,0.11C8.417,8.091,8.471,8.2,8.625,8.167c0.156-0.034,0.132-0.162,0.102-0.195C8.695,7.938,8.672,7.853,8.642,7.794c-0.031-0.06-0.023-0.136,0.14-0.153C8.944,7.625,9.168,7.708,9.16,7.573s0-0.28,0.046-0.356C9.253,7.142,9.354,7.09,9.299,7.065C9.246,7.04,9.176,7.099,9.121,6.972c-0.054-0.127,0.047-0.22,0.108-0.271c0.02-0.015,0.067-0.06,0.124-0.112C11.234,5.257,13.524,4.466,16,4.466c3.213,0,6.122,1.323,8.214,3.45c-0.008,0.022-0.01,0.052-0.031,0.056c-0.077,0.013-0.166,0.063-0.179-0.051c-0.013-0.114-0.013-0.331-0.102-0.203c-0.089,0.127-0.127,0.127-0.127,0.191c0,0.063,0.076,0.127,0.051,0.241C23.8,8.264,23.8,8.341,23.84,8.341c0.036,0,0.126-0.115,0.239-0.141c0.116-0.025,0.319-0.088,0.332,0.026c0.013,0.115,0.139,0.152,0.013,0.203c-0.128,0.051-0.267,0.026-0.293-0.051c-0.025-0.077-0.114-0.077-0.203-0.013c-0.088,0.063-0.279,0.292-0.279,0.292s-0.306,0.139-0.343,0.114c-0.04-0.025,0.101-0.165,0.203-0.228c0.102-0.064,0.178-0.204,0.14-0.242c-0.038-0.038-0.088-0.279-0.063-0.343c0.025-0.063,0.139-0.152,0.013-0.216c-0.127-0.063-0.217-0.14-0.318-0.178s-0.216,0.152-0.305,0.204c-0.089,0.051-0.076,0.114-0.191,0.127c-0.114,0.013-0.189,0.165,0,0.254c0.191,0.089,0.255,0.152,0.204,0.204c-0.051,0.051-0.267-0.025-0.267-0.025s-0.165-0.076-0.268-0.076c-0.101,0-0.229-0.063-0.33-0.076c-0.102-0.013-0.306-0.013-0.355,0.038c-0.051,0.051-0.179,0.203-0.28,0.152c-0.101-0.051-0.101-0.102-0.241-0.051c-0.14,0.051-0.279-0.038-0.355,0.038c-0.077,0.076-0.013,0.076-0.255,0c-0.241-0.076-0.189,0.051-0.419,0.089s-0.368-0.038-0.432,0.038c-0.064,0.077-0.153,0.217-0.19,0.127c-0.038-0.088,0.126-0.241,0.062-0.292c-0.062-0.051-0.33-0.025-0.367,0.013c-0.039,0.038-0.014,0.178,0.011,0.229c0.026,0.05,0.064,0.254-0.011,0.216c-0.077-0.038-0.064-0.166-0.141-0.152c-0.076,0.013-0.165,0.051-0.203,0.077c-0.038,0.025-0.191,0.025-0.229,0.076c-0.037,0.051,0.014,0.191-0.051,0.203c-0.063,0.013-0.114,0.064-0.254-0.025c-0.14-0.089-0.14-0.038-0.178-0.012c-0.038,0.025-0.216,0.127-0.229,0.012c-0.013-0.114,0.025-0.152-0.089-0.229c-0.115-0.076-0.026-0.076,0.127-0.025c0.152,0.05,0.343,0.075,0.622-0.013c0.28-0.089,0.395-0.127,0.28-0.178c-0.115-0.05-0.229-0.101-0.406-0.127c-0.179-0.025-0.42-0.025-0.7-0.127c-0.279-0.102-0.343-0.14-0.457-0.165c-0.115-0.026-0.813-0.14-1.132-0.089c-0.317,0.051-1.193,0.28-1.245,0.318s-0.128,0.19-0.292,0.318c-0.165,0.127-0.47,0.419-0.712,0.47c-0.241,0.051-0.521,0.254-0.521,0.305c0,0.051,0.101,0.242,0.076,0.28c-0.025,0.038,0.05,0.229,0.191,0.28c0.139,0.05,0.381,0.038,0.393-0.039c0.014-0.076,0.204-0.241,0.217-0.127c0.013,0.115,0.14,0.292,0.114,0.368c-0.025,0.077,0,0.153,0.09,0.14c0.088-0.012,0.559-0.114,0.559-0.114s0.153-0.064,0.127-0.166c-0.026-0.101,0.166-0.241,0.203-0.279c0.038-0.038,0.178-0.191,0.014-0.241c-0.167-0.051-0.293-0.064-0.115-0.216s0.292,0,0.521-0.229c0.229-0.229-0.051-0.292,0.191-0.305c0.241-0.013,0.496-0.025,0.444,0.051c-0.05,0.076-0.342,0.242-0.508,0.318c-0.166,0.077-0.14,0.216-0.076,0.292c0.063,0.076,0.09,0.254,0.204,0.229c0.113-0.025,0.254-0.114,0.38-0.101c0.128,0.012,0.383-0.013,0.42-0.013c0.039,0,0.216,0.178,0.114,0.203c-0.101,0.025-0.229,0.013-0.445,0.025c-0.215,0.013-0.456,0.013-0.456,0.051c0,0.039,0.292,0.127,0.19,0.191c-0.102,0.063-0.203-0.013-0.331-0.026c-0.127-0.012-0.203,0.166-0.241,0.267c-0.039,0.102,0.063,0.28-0.127,0.216c-0.191-0.063-0.331-0.063-0.381-0.038c-0.051,0.025-0.203,0.076-0.331,0.114c-0.126,0.038-0.076-0.063-0.242-0.063c-0.164,0-0.164,0-0.164,0l-0.103,0.013c0,0-0.101-0.063-0.114-0.165c-0.013-0.102,0.05-0.216-0.013-0.241c-0.064-0.026-0.292,0.012-0.33,0.088c-0.038,0.076-0.077,0.216-0.026,0.28c0.052,0.063,0.204,0.19,0.064,0.152c-0.14-0.038-0.317-0.051-0.419,0.026c-0.101,0.076-0.279,0.241-0.279,0.241s-0.318,0.025-0.318,0.102c0,0.077,0,0.178-0.114,0.191c-0.115,0.013-0.268,0.05-0.42,0.076c-0.153,0.025-0.139,0.088-0.317,0.102s-0.204,0.089-0.038,0.114c0.165,0.025,0.418,0.127,0.431,0.241c0.014,0.114-0.013,0.242-0.076,0.356c-0.043,0.079-0.305,0.026-0.458,0.026c-0.152,0-0.456-0.051-0.584,0c-0.127,0.051-0.102,0.305-0.064,0.419c0.039,0.114-0.012,0.178-0.063,0.216c-0.051,0.038-0.065,0.152,0,0.204c0.063,0.051,0.114,0.165,0.166,0.178c0.051,0.013,0.215-0.038,0.279,0.025c0.064,0.064,0.127,0.216,0.165,0.178c0.039-0.038,0.089-0.203,0.153-0.166c0.064,0.039,0.216-0.012,0.331-0.025s0.177-0.14,0.292-0.204c0.114-0.063,0.05-0.063,0.013-0.14c-0.038-0.076,0.114-0.165,0.204-0.254c0.088-0.089,0.253-0.013,0.292-0.115c0.038-0.102,0.051-0.279,0.151-0.267c0.103,0.013,0.243,0.076,0.331,0.076c0.089,0,0.279-0.14,0.332-0.165c0.05-0.025,0.241-0.013,0.267,0.102c0.025,0.114,0.241,0.254,0.292,0.279c0.051,0.025,0.381,0.127,0.433,0.165c0.05,0.038,0.126,0.153,0.152,0.254c0.025,0.102,0.114,0.102,0.128,0.013c0.012-0.089-0.065-0.254,0.025-0.242c0.088,0.013,0.191-0.026,0.191-0.026s-0.243-0.165-0.331-0.203c-0.088-0.038-0.255-0.114-0.331-0.241c-0.076-0.127-0.267-0.153-0.254-0.279c0.013-0.127,0.191-0.051,0.292,0.051c0.102,0.102,0.356,0.241,0.445,0.33c0.088,0.089,0.229,0.127,0.267,0.242c0.039,0.114,0.152,0.241,0.19,0.292c0.038,0.051,0.165,0.331,0.204,0.394c0.038,0.063,0.165-0.012,0.229-0.063c0.063-0.051,0.179-0.076,0.191-0.178c0.013-0.102-0.153-0.178-0.203-0.216c-0.051-0.038,0.127-0.076,0.191-0.127c0.063-0.05,0.177-0.14,0.228-0.063c0.051,0.077,0.026,0.381,0.051,0.432c0.025,0.051,0.279,0.127,0.331,0.191c0.05,0.063,0.267,0.089,0.304,0.051c0.039-0.038,0.242,0.026,0.294,0.038c0.049,0.013,0.202-0.025,0.304-0.05c0.103-0.025,0.204-0.102,0.191,0.063c-0.013,0.165-0.051,0.419-0.179,0.546c-0.127,0.127-0.076,0.191-0.202,0.191c-0.06,0-0.113,0-0.156,0.021c-0.041-0.065-0.098-0.117-0.175-0.097c-0.152,0.038-0.344,0.038-0.47,0.19c-0.128,0.153-0.178,0.165-0.204,0.114c-0.025-0.051,0.369-0.267,0.317-0.331c-0.05-0.063-0.355-0.038-0.521-0.038c-0.166,0-0.305-0.102-0.433-0.127c-0.126-0.025-0.292,0.127-0.418,0.254c-0.128,0.127-0.216,0.038-0.331,0.038c-0.115,0-0.331-0.165-0.331-0.165s-0.216-0.089-0.305-0.089c-0.088,0-0.267-0.165-0.318-0.165c-0.05,0-0.19-0.115-0.088-0.166c0.101-0.05,0.202,0.051,0.101-0.229c-0.101-0.279-0.33-0.216-0.419-0.178c-0.088,0.039-0.724,0.025-0.775,0.025c-0.051,0-0.419,0.127-0.533,0.178c-0.116,0.051-0.318,0.115-0.369,0.14c-0.051,0.025-0.318-0.051-0.433,0.013c-0.151,0.084-0.291,0.216-0.33,0.216c-0.038,0-0.153,0.089-0.229,0.28c-0.077,0.19,0.013,0.355-0.128,0.419c-0.139,0.063-0.394,0.204-0.495,0.305c-0.102,0.101-0.229,0.458-0.355,0.623c-0.127,0.165,0,0.317,0.025,0.419c0.025,0.101,0.114,0.292-0.025,0.471c-0.14,0.178-0.127,0.266-0.191,0.279c-0.063,0.013,0.063,0.063,0.088,0.19c0.025,0.128-0.114,0.255,0.128,0.369c0.241,0.113,0.355,0.217,0.418,0.367c0.064,0.153,0.382,0.407,0.382,0.407s0.229,0.205,0.344,0.293c0.114,0.089,0.152,0.038,0.177-0.05c0.025-0.09,0.178-0.104,0.355-0.104c0.178,0,0.305,0.04,0.483,0.014c0.178-0.025,0.356-0.141,0.42-0.166c0.063-0.025,0.279-0.164,0.443-0.063c0.166,0.103,0.141,0.241,0.23,0.332c0.088,0.088,0.24,0.037,0.355-0.051c0.114-0.09,0.064-0.052,0.203,0.025c0.14,0.075,0.204,0.151,0.077,0.267c-0.128,0.113-0.051,0.293-0.128,0.47c-0.076,0.178-0.063,0.203,0.077,0.278c0.14,0.076,0.394,0.548,0.47,0.638c0.077,0.088-0.025,0.342,0.064,0.495c0.089,0.151,0.178,0.254,0.077,0.331c-0.103,0.075-0.28,0.216-0.292,0.47s0.051,0.431,0.102,0.521s0.177,0.331,0.241,0.419c0.064,0.089,0.14,0.305,0.152,0.445c0.013,0.14-0.024,0.306,0.039,0.381c0.064,0.076,0.102,0.191,0.216,0.292c0.115,0.103,0.152,0.318,0.152,0.318s0.039,0.089,0.051,0.229c0.012,0.14,0.025,0.228,0.152,0.292c0.126,0.063,0.215,0.076,0.28,0.013c0.063-0.063,0.381-0.077,0.546-0.063c0.165,0.013,0.355-0.075,0.521-0.19s0.407-0.419,0.496-0.508c0.089-0.09,0.292-0.255,0.268-0.356c-0.025-0.101-0.077-0.203,0.024-0.254c0.102-0.052,0.344-0.152,0.356-0.229c0.013-0.077-0.09-0.395-0.115-0.457c-0.024-0.064,0.064-0.18,0.165-0.306c0.103-0.128,0.421-0.216,0.471-0.267c0.051-0.053,0.191-0.267,0.217-0.433c0.024-0.167-0.051-0.369,0-0.457c0.05-0.09,0.013-0.165-0.103-0.268c-0.114-0.102-0.089-0.407-0.127-0.457c-0.037-0.051-0.013-0.319,0.063-0.345c0.076-0.023,0.242-0.279,0.344-0.393c0.102-0.114,0.394-0.47,0.534-0.496c0.139-0.025,0.355-0.229,0.368-0.343c0.013-0.115,0.38-0.547,0.394-0.635c0.013-0.09,0.166-0.42,0.102-0.497c-0.062-0.076-0.559,0.115-0.622,0.141c-0.064,0.025-0.241,0.127-0.446,0.113c-0.202-0.013-0.114-0.177-0.127-0.254c-0.012-0.076-0.228-0.368-0.279-0.381c-0.051-0.012-0.203-0.166-0.267-0.317c-0.063-0.153-0.152-0.343-0.254-0.458c-0.102-0.114-0.165-0.38-0.268-0.559c-0.101-0.178-0.189-0.407-0.279-0.572c-0.021-0.041-0.045-0.079-0.067-0.117c0.118-0.029,0.289-0.082,0.31-0.009c0.024,0.088,0.165,0.279,0.19,0.419s0.165,0.089,0.178,0.216c0.014,0.128,0.14,0.433,0.19,0.47c0.052,0.038,0.28,0.242,0.318,0.318c0.038,0.076,0.089,0.178,0.127,0.369c0.038,0.19,0.076,0.444,0.179,0.482c0.102,0.038,0.444-0.064,0.508-0.102s0.482-0.242,0.635-0.255c0.153-0.012,0.179-0.115,0.368-0.152c0.191-0.038,0.331-0.177,0.458-0.28c0.127-0.101,0.28-0.355,0.33-0.444c0.052-0.088,0.179-0.152,0.115-0.253c-0.063-0.103-0.331-0.254-0.433-0.268c-0.102-0.012-0.089-0.178-0.152-0.178s-0.051,0.088-0.178,0.153c-0.127,0.063-0.255,0.19-0.344,0.165s0.026-0.089-0.113-0.203s-0.192-0.14-0.192-0.228c0-0.089-0.278-0.255-0.304-0.382c-0.026-0.127,0.19-0.305,0.254-0.19c0.063,0.114,0.115,0.292,0.279,0.368c0.165,0.076,0.318,0.204,0.395,0.229c0.076,0.025,0.267-0.14,0.33-0.114c0.063,0.024,0.191,0.253,0.306,0.292c0.113,0.038,0.495,0.051,0.559,0.051s0.33,0.013,0.381-0.063c0.051-0.076,0.089-0.076,0.153-0.076c0.062,0,0.177,0.229,0.267,0.254c0.089,0.025,0.254,0.013,0.241,0.179c-0.012,0.164,0.076,0.305,0.165,0.317c0.09,0.012,0.293-0.191,0.293-0.191s0,0.318-0.012,0.433c-0.014,0.113,0.139,0.534,0.139,0.534s0.19,0.393,0.241,0.482s0.267,0.355,0.267,0.47c0,0.115,0.025,0.293,0.103,0.293c0.076,0,0.152-0.203,0.24-0.331c0.091-0.126,0.116-0.305,0.153-0.432c0.038-0.127,0.038-0.356,0.038-0.444c0-0.09,0.075-0.166,0.255-0.242c0.178-0.076,0.304-0.292,0.456-0.407c0.153-0.115,0.141-0.305,0.446-0.305c0.305,0,0.278,0,0.355-0.077c0.076-0.076,0.151-0.127,0.19,0.013c0.038,0.14,0.254,0.343,0.292,0.394c0.038,0.052,0.114,0.191,0.103,0.344c-0.013,0.152,0.012,0.33,0.075,0.33s0.191-0.216,0.191-0.216s0.279-0.189,0.267,0.013c-0.014,0.203,0.025,0.419,0.025,0.545c0,0.053,0.042,0.135,0.088,0.21c-0.005,0.059-0.004,0.119-0.009,0.178C27.388,17.153,27.387,17.327,27.436,17.39zM20.382,12.064c0.076,0.05,0.102,0.127,0.152,0.203c0.052,0.076,0.14,0.05,0.203,0.114c0.063,0.064-0.178,0.14-0.075,0.216c0.101,0.077,0.151,0.381,0.165,0.458c0.013,0.076-0.279,0.114-0.369,0.102c-0.089-0.013-0.354-0.102-0.445-0.127c-0.089-0.026-0.139-0.343-0.025-0.331c0.116,0.013,0.141-0.025,0.267-0.139c0.128-0.115-0.189-0.166-0.278-0.191c-0.089-0.025-0.268-0.305-0.331-0.394c-0.062-0.089-0.014-0.228,0.141-0.331c0.076-0.051,0.279,0.063,0.381,0c0.101-0.063,0.203-0.14,0.241-0.165c0.039-0.025,0.293,0.038,0.33,0.114c0.039,0.076,0.191,0.191,0.141,0.229c-0.052,0.038-0.281,0.076-0.356,0c-0.075-0.077-0.255,0.012-0.268,0.152C20.242,12.115,20.307,12.013,20.382,12.064zM16.875,12.28c-0.077-0.025,0.025-0.178,0.102-0.229c0.075-0.051,0.164-0.178,0.241-0.305c0.076-0.127,0.178-0.14,0.241-0.127c0.063,0.013,0.203,0.241,0.241,0.318c0.038,0.076,0.165-0.026,0.217-0.051c0.05-0.025,0.127-0.102,0.14-0.165s0.127-0.102,0.254-0.102s0.013,0.102-0.076,0.127c-0.09,0.025-0.038,0.077,0.113,0.127c0.153,0.051,0.293,0.191,0.459,0.279c0.165,0.089,0.19,0.267,0.088,0.292c-0.101,0.025-0.406,0.051-0.521,0.038c-0.114-0.013-0.254-0.127-0.419-0.153c-0.165-0.025-0.369-0.013-0.433,0.077s-0.292,0.05-0.395,0.05c-0.102,0-0.228,0.127-0.253,0.077C16.875,12.534,16.951,12.306,16.875,12.28zM17.307,9.458c0.063-0.178,0.419,0.038,0.355,0.127C17.599,9.675,17.264,9.579,17.307,9.458zM17.802,18.584c0.063,0.102-0.14,0.431-0.254,0.407c-0.113-0.027-0.076-0.318-0.038-0.382C17.548,18.545,17.769,18.529,17.802,18.584zM13.189,12.674c0.025-0.051-0.039-0.153-0.127-0.013C13.032,12.71,13.164,12.725,13.189,12.674zM20.813,8.035c0.141,0.076,0.339,0.107,0.433,0.013c0.076-0.076,0.013-0.204-0.05-0.216c-0.064-0.013-0.104-0.115,0.062-0.203c0.165-0.089,0.343-0.204,0.534-0.229c0.19-0.025,0.622-0.038,0.774,0c0.152,0.039,0.382-0.166,0.445-0.254s-0.203-0.152-0.279-0.051c-0.077,0.102-0.444,0.076-0.521,0.051c-0.076-0.025-0.686,0.102-0.812,0.102c-0.128,0-0.179,0.152-0.356,0.229c-0.179,0.076-0.42,0.191-0.509,0.229c-0.088,0.038-0.177,0.19-0.101,0.216C20.509,7.947,20.674,7.959,20.813,8.035zM14.142,12.674c0.064-0.089-0.051-0.217-0.114-0.217c-0.12,0-0.178,0.191-0.103,0.254C14.002,12.776,14.078,12.763,14.142,12.674zM14.714,13.017c0.064,0.025,0.114,0.102,0.165,0.114c0.052,0.013,0.217,0,0.167-0.127s-0.167-0.127-0.204-0.127c-0.038,0-0.203-0.038-0.267,0C14.528,12.905,14.65,12.992,14.714,13.017zM11.308,10.958c0.101,0.013,0.217-0.063,0.305-0.101c0.088-0.038,0.216-0.114,0.216-0.229c0-0.114-0.025-0.216-0.077-0.267c-0.051-0.051-0.14-0.064-0.216-0.051c-0.115,0.02-0.127,0.14-0.203,0.14c-0.076,0-0.165,0.025-0.14,0.114s0.077,0.152,0,0.19C11.117,10.793,11.205,10.946,11.308,10.958zM11.931,10.412c0.127,0.051,0.394,0.102,0.292,0.153c-0.102,0.051-0.28,0.19-0.305,0.267s0.216,0.153,0.216,0.153s-0.077,0.089-0.013,0.114c0.063,0.025,0.102-0.089,0.203-0.089c0.101,0,0.304,0.063,0.406,0.063c0.103,0,0.267-0.14,0.254-0.229c-0.013-0.089-0.14-0.229-0.254-0.28c-0.113-0.051-0.241-0.28-0.317-0.331c-0.076-0.051,0.076-0.178-0.013-0.267c-0.09-0.089-0.153-0.076-0.255-0.14c-0.102-0.063-0.191,0.013-0.254,0.089c-0.063,0.076-0.14-0.013-0.217,0.012c-0.102,0.035-0.063,0.166-0.012,0.229C11.714,10.221,11.804,10.361,11.931,10.412zM24.729,17.198c-0.083,0.037-0.153,0.47,0,0.521c0.152,0.052,0.241-0.202,0.191-0.267C24.868,17.39,24.843,17.147,24.729,17.198zM20.114,20.464c-0.159-0.045-0.177,0.166-0.304,0.306c-0.128,0.141-0.267,0.254-0.317,0.241c-0.052-0.013-0.331,0.089-0.242,0.279c0.089,0.191,0.076,0.382-0.013,0.472c-0.089,0.088,0.076,0.342,0.052,0.482c-0.026,0.139,0.037,0.229,0.215,0.229s0.242-0.064,0.318-0.229c0.076-0.166,0.088-0.331,0.164-0.47c0.077-0.141,0.141-0.434,0.179-0.51c0.038-0.075,0.114-0.316,0.102-0.457C20.254,20.669,20.204,20.489,20.114,20.464zM10.391,8.802c-0.069-0.06-0.229-0.102-0.306-0.11c-0.076-0.008-0.152,0.06-0.321,0.06c-0.168,0-0.279,0.067-0.347,0C9.349,8.684,9.068,8.65,9.042,8.692C9.008,8.749,8.941,8.751,9.008,8.87c0.069,0.118,0.12,0.186,0.179,0.178s0.262-0.017,0.288,0.051C9.5,9.167,9.569,9.226,9.712,9.184c0.145-0.042,0.263-0.068,0.296-0.119c0.033-0.051,0.263-0.059,0.263-0.059S10.458,8.861,10.391,8.802z").attr({fill: "#000", stroke: "none"});' .  "\n";
	}
		
	
	//----------------------------------------------------------------------------------------------
	function EndPicture ()
	{
		$this->output .= '</script>';
	}
	
}



//-------------------------------------------------------------------------------------------------
class TreeDrawer
{
	var $t;
	var $width 		= 0;
	var $height 	= 0;
	var $left 		= 0;
	var $top 		= 0;
	var $leaf_count = 0;
	var $leaf_gap	= 0;
	var $node_gap	= 0;
	var $last_y		= 0;
	var $max_depth 	= 0;
	var $last_label = 0;
	var $max_height = 0;
	
	var $draw_leaf_labels = true;
	var $draw_scale_bar = true;
	
	var $map = '';
	
	var $settings = array();
	
	var $port;
	
	
	//----------------------------------------------------------------------------------------------
	function __construct($tree, $attr)
	{
		$this->t = $tree;
		
		// Settings
		$this->settings = $attr;		
		
		// Ensure sensible defaults
		$this->SetDefaults();
			
		$this->left = $this->settings['inset'];
		$this->top = $this->settings['inset'];
		$this->width = $this->settings['width'] - 2 * $this->settings['inset'];
		$this->height = $this->settings['height'] - 2 * $this->settings['inset'];
				
		$this->last_label = -($this->settings['font_height']/2.0);

		if (isset($this->settings['draw_leaf_labels']))
		{
			$this->draw_leaf_labels = $this->settings['draw_leaf_labels'];
		}	
		if (isset($this->settings['draw_scale_bar']))
		{
			$this->draw_scale_bar = $this->settings['draw_scale_bar'];
		}	
	}
	
	//----------------------------------------------------------------------------------------------
	function SetDefaults()
	{
		if (!isset($this->settings['font_height']))
		{
			$this->settings['font_height'] = 10;
		}	
		if (!isset($this->settings['inset']))
		{
			$this->settings['inset'] = $this->settings['font_height'];
		}
		if (!isset($this->settings['width']))
		{
			$this->settings['width'] = 200;
		}
		if (!isset($this->settings['height']))
		{
			$this->settings['height'] = 400;
		}
	}
	
	
	//----------------------------------------------------------------------------------------------
	function CalcInternal($p)
	{
		// Cladogram
		$pt = array();		
		$pt['x'] = $this->left + $this->node_gap * ($this->t->GetNumLeaves() - $p->GetAttribute('weight'));
		$pt['y'] = $this->last_y - (($p->GetAttribute('weight') - 1) * $this->leaf_gap)/2.0;

		$p->SetAttribute('xy', $pt);
	}

	//----------------------------------------------------------------------------------------------
	function CalcLeaf($p)
	{
		$pt = array();
		$pt['y'] = $this->top + $this->leaf_count * $this->leaf_gap;
		$this->last_y = $pt['y'];
		$this->leaf_count++;
		
		// cladogram
		$pt['x'] = $this->left + $this->width;
		
		$p->SetAttribute('xy', $pt);
		
		// image map
		/*$this->map .= '<area shape="rect" coords="' 
		. ($pt['x'] + 10) . ',' . ($pt['y'] - 5) . ',' . ($pt['x'] + 10 + strlen($p->GetLabel()) * 10) . ',' . ($pt['y'] + 5) 
		. '" href="http://www.ncbi.nlm.nih.gov/nuccore/' . $p->GetLabel() . '" />' . "\n";*/
		
		$this->max_height = max($this->max_height, $pt['y']);
	}
	
	//----------------------------------------------------------------------------------------------
	function CalcCoordinates()
	{
		$leaves = $this->t->GetNumLeaves();
		$this->leaf_count = 0;
   		$this->leaf_gap = $this->height / ($leaves - 1.0);
   		
   		if ($this->t->IsRooted())		
		{
			$this->node_gap = $this->width / ($leaves);
			
			$this->left += $this->node_gap; 
			$this->width -= $this->node_gap; 
		}
		else
		{
			$this->node_gap = $this->width / ($leaves - 1.0);	
		}
		
		$n = new NodeIterator ($this->t->getRoot());
		
		$q = $n->Begin();
		while ($q != NULL)
		{
			
			if ($q->IsLeaf ())
			{
				$this->CalcLeaf ($q);
			}
			else
			{
				$this->CalcInternal ($q);
			}
	
			$q = $n->Next();
		}
	}
	
	//----------------------------------------------------------------------------------------------
	function Draw($port)
	{
		$this->port = $port;
		
		$n = new NodeIterator ($this->t->getRoot());
		
		$q = $n->Begin();
		while ($q != NULL)
		{			
			if ($q->IsLeaf ())
			{
				$this->DrawLeaf ($q);
			}
			else
			{
				$this->DrawInternal ($q);
			}
	
			$q = $n->Next();
		}
		if ($this->t->IsRooted())
		{
			$this->DrawRoot ();
		}

	}
	
	//----------------------------------------------------------------------------------------------
	function DrawLeaf($p)
	{
		$anc = $p->GetAncestor();
		if ($anc)
		{
			// Slant
			$p0 = $p->GetAttribute('xy');
			$p1 = $anc->GetAttribute('xy');

			$this->port->DrawLine($p0, $p1);
 		}
 		
 		if ($this->draw_leaf_labels)
 		{
 			$this->DrawLeafLabel ($p);	
 		}
	}
	
	//----------------------------------------------------------------------------------------------
	function DrawLeaflabel($p)
	{
		$p0 = $p->GetAttribute('xy');
		
		if ($p0['y'] - $this->last_label > $this->settings['font_height'])
		{
			$this->port->DrawText($p0, $p->Getlabel()); 
			$this->last_label  = $p0['y'];
		}
	}

	//----------------------------------------------------------------------------------------------
	function DrawLine($p0, $p1)
	{
		echo 'context.moveTo(' . $p0['x'] . ',' . $p0['y'] . ');' . "\n";
		echo 'context.lineTo(' . $p1['x'] . ',' . $p1['y'] . ');' . "\n";
		echo 'context.stroke();' . "\n";
	}
	
	//----------------------------------------------------------------------------------------------
	function DrawInternal($p)
	{
		$p0 = $p->GetAttribute('xy');
		$anc = $p->GetAncestor();
		if ($anc)
		{
			// Slant
			$p1 = $anc->GetAttribute('xy');
			$this->port->DrawLine($p0, $p1);
		}
 		$this->DrawInternalLabel ($p);		
	}
	
	//----------------------------------------------------------------------------------------------
	function DrawInternalLabel($p)
	{
		if ($p->GetLabel())
		{
			// to do test
			$p0 = $p->GetAttribute('xy');
		}

	}
	
	//----------------------------------------------------------------------------------------------
	function DrawRoot()
	{
		$p0 = $this->t->GetRoot()->GetAttribute('xy');
		$p1 = $p0;
		$p1['x'] -= $this->node_gap;
		//$this->DrawLine($p0, $p1);	
		$this->port->DrawLine($p0, $p1);
	}
	
	//----------------------------------------------------------------------------------------------
	function GetMap()
	{
		return $this->map;
	}
	
	
}

//-------------------------------------------------------------------------------------------------
class RectangleTreeDrawer extends TreeDrawer
{
	
	
	//----------------------------------------------------------------------------------------------
	function CalcInternal($p)
	{
		$pt['x'] = $this->left + $this->node_gap * ($this->max_depth - $p->GetAttribute('depth'));
    	
		$pl = $p->GetChild()->GetAttribute('xy');
		$pr = $p->GetChild()->GetRightMostSibling()->GetAttribute('xy');
		
		$pt['y'] = $pl['y'] + ($pr['y'] - $pl['y'])/2.0;
   	
		$p->SetAttribute('xy', $pt);
	}

	
	//----------------------------------------------------------------------------------------------
	function CalcCoordinates()
	{
		// rectangle		
		foreach ($this->t->nodes as $n)
		{
			$n->SetAttribute('depth', 0);
		}
		$this->max_depth = 0;
		foreach ($this->t->nodes as $n)
		{
			if ($n->IsLeaf())
			{
				$p = $n->GetAncestor();
				$count = 1;
				while ($p)
				{
					if ($count > $p->GetAttribute('depth'))
					{
						$p->SetAttribute('depth', $count);
						$this->max_depth = max($this->max_depth, $count);
					}
					$count++;
					$p = $p->GetAncestor();
				}
			}
		}						
		$leaves = $this->t->GetNumLeaves();
		$this->leaf_count = 0;
   		$this->leaf_gap = $this->height / ($leaves - 1.0);
   		
   		if ($this->t->IsRooted())		
		{
			$this->node_gap = $this->width / ($this->max_depth + 1);
			
			$this->left += $this->node_gap; 
			$this->width -= $this->node_gap; 
		}
		else
		{
//			$this->node_gap = $this->width / ($leaves - 1.0);	
			$this->node_gap = $this->width / $this->max_depth;	
		}
		
		$n = new NodeIterator ($this->t->getRoot());
		
		$q = $n->Begin();
		while ($q != NULL)
		{
			
			if ($q->IsLeaf ())
			{
				$this->CalcLeaf ($q);
			}
			else
			{
				$this->CalcInternal ($q);
			}
	
			$q = $n->Next();
		}
	}
	
	
	//----------------------------------------------------------------------------------------------
	function DrawLeaf($p)
	{
		$anc = $p->GetAncestor();
		if ($anc)
		{

			// Rectangle
			$p0 = $p->GetAttribute('xy');
			$p1 = $anc->GetAttribute('xy');
			$p1['y'] = $p0['y'];
			
			$this->port->DrawLine($p0, $p1);
 		}
 		
 		if ($this->draw_leaf_labels)
 		{
 			$this->DrawLeafLabel ($p);	
 		}
	}
	
	
	//----------------------------------------------------------------------------------------------
	function DrawInternal($p)
	{
		$p0 = $p->GetAttribute('xy');
		$anc = $p->GetAncestor();
		if ($anc)
		{
			$p1 = $anc->GetAttribute('xy');
			$p1['y'] = $p0['y'];
				
			$this->port->DrawLine($p0, $p1);
			
		}
		
		// rectangle
		$pl = $p->GetChild()->GetAttribute('xy');
		$pr = $p->GetChild()->GetRightMostSibling()->GetAttribute('xy');
		
		$p0['x'] = $p0['x'];
		$p0['y'] = $pl['y'];
		$p1['x'] = $p0['x'];
		$p1['y'] = $pr['y'];

		$this->port->DrawLine($p0, $p1);
		
 		$this->DrawInternalLabel ($p);		
	}
	

	
}


//-------------------------------------------------------------------------------------------------
class PhylogramTreeDrawer extends RectangleTreeDrawer
{
	var $max_path_length = 0.0;
	
	
	//----------------------------------------------------------------------------------------------
	function CalcInternal($p)
	{
		$pt = array();
		$pt['x'] = $this->left + ($p->GetAttribute('path_length') / $this->max_path_length) * $this->width;
    	
		$pl = $p->GetChild()->GetAttribute('xy');
		$pr = $p->GetChild()->GetRightMostSibling()->GetAttribute('xy');
		
		$pt['y'] = $pl['y'] + ($pr['y'] - $pl['y'])/2.0;
   	
		$p->SetAttribute('xy', $pt);
	}
	
	//----------------------------------------------------------------------------------------------
	function CalcLeaf($p)
	{
		$pt = array();
		$pt['y'] = $this->top + $this->leaf_count * $this->leaf_gap;
		$this->last_y = $pt['y'];
		$this->leaf_count++;
		
		// cladogram
		$pt['x'] = $this->left + ($p->GetAttribute('path_length') / $this->max_path_length) * $this->width;
		
		$p->SetAttribute('xy', $pt);
		
		$this->max_height = max($this->max_height, $pt['y']);
	}		

	
	//----------------------------------------------------------------------------------------------
	function CalcCoordinates()
	{
		$this->max_path_length = 0.0;		
		$this->t->GetRoot()->SetAttribute('path_length', $this->t->GetRoot()->GetAttribute('edge_length'));

		// Get path lengths
		$n = new PreorderIterator ($this->t->getRoot());
		$q = $n->Begin();
		while ($q != NULL)
		{			
			$d = $q->GetAttribute('edge_length');
			if ($d < 0.00001)
			{
				$d = 0.0;
			}
        	if ($q != $this->t->GetRoot())
	    		$q->SetAttribute('path_length', $q->GetAncestor()->GetAttribute('path_length') + $d);

			$this->max_path_length = max($this->max_path_length, $q->GetAttribute('path_length'));
			$q = $n->Next();
		}

		$this->height -= $this->settings['font_height'];

		$leaves = $this->t->GetNumLeaves();
		$this->leaf_count = 0;
   		$this->leaf_gap = $this->height / ($leaves - 1.0);

		$n = new NodeIterator ($this->t->getRoot());
		
		$q = $n->Begin();
		while ($q != NULL)
		{
			
			if ($q->IsLeaf ())
			{
				$this->CalcLeaf ($q);
			}
			else
			{
				$this->CalcInternal ($q);
			}
	
			$q = $n->Next();
		}
		
		// Space for scale bar
		if ($this->draw_scale_bar)
		{
			$this->max_height += $this->settings['font_height'];
		}
	}
	
	//----------------------------------------------------------------------------------------------
	function Draw($port)
	{
		parent::Draw($port);
		if ($this->draw_scale_bar)
		{
			$this->DrawScaleBar($port);
		}
	}

	//----------------------------------------------------------------------------------------------
	function DrawScaleBar($port)
	{
		$pt1 = array();
		$pt2 = array();
		
		$m = log10($this->max_path_length);
		$i = floor($m);
		//     if (!mUltrametric)

		//$i -= 1;
		$bar = pow(10.0, $i);
		
		//echo $bar;
		
		$scalebar = ($bar/$this->max_path_length) * $this->width;
		
		if (0)
		{
		}
		else
		{
			// Scale bar
			$pt1['x'] = $this->left;
			$pt1['y'] = $this->top + $this->height + $this->settings['font_height'];

			$pt2['x'] = $pt1['x'] + $scalebar;
			$pt2['y'] = $pt1['y'];
			
			
			$this->port->DrawLine($pt1, $pt2);
			
			// Label
			$buf = '';
			if ($i >= 0)
			{
				$buf = sprintf ("%d", floor($bar));
			}
			else
			{
				$j = abs ($i);
				$buf = sprintf ("%." . $j . "f", $bar);
			}
			// Offset value from scale bar
			$pt2['x'] += $this->settings['font_height']/3;			
			$this->port->DrawText($pt2, $buf);
			
  		}
	}
	
	
}	

//-------------------------------------------------------------------------------------------------
class KmlTreeDrawer extends RectangleTreeDrawer
{
	var $altitudeFactor = 10000.0;
	var $kml = '';
	
	
	//----------------------------------------------------------------------------------------------
	function CalcInternal($p)
	{
		$lat1 = deg2rad($p->GetChild()->GetAttribute('lat'));
		$long1 = deg2rad($p->GetChild()->GetAttribute('long'));

		$lat2 = deg2rad($p->GetChild()->GetRightMostSibling()->GetAttribute('lat'));
		$long2 = deg2rad($p->GetChild()->GetRightMostSibling()->GetAttribute('long'));
				
		if (($lat1 == $lat2) && ($long1 == $long2))
		{
			$d = 0.0;
		}
		else
		{
			$d = acos(sin($lat1)*sin($lat2)+cos($lat1)*cos($lat2)*cos($long1-$long2));
		}
	
		if ($d == 0.0)
		{
			// descendants are on same spot
			$p->SetAttribute('lat', $p->GetChild()->GetAttribute('lat'));
			$p->SetAttribute('long', $p->GetChild()->GetAttribute('long'));
		}
		else
		{
			$frac = 0.5;

			$A =sin((1-$frac)*$d)/sin($d);
			$B =sin($frac*$d)/sin($d);
			$x = $A*cos($lat1)*cos($long1) +  $B*cos($lat2)*cos($long2);
			$y = $A*cos($lat1)*sin($long1) +  $B*cos($lat2)*sin($long2);
			$z = $A*sin($lat1)            +  $B*sin($lat2);
			$lat=atan2($z,sqrt($x*$x+$y*$y));
			$long=atan2($y,$x);
		
			$p->SetAttribute('lat', rad2deg($lat)); 
			$p->SetAttribute('long', rad2deg($long));
		}
		
		if ($this->t->HasBranchLengths())
		{
			$p->SetAttribute('altitude',
				($this->max_path_length - $p->GetAttribute('path_length')) * 500 * $this->altitudeFactor);		
		}
		else
		{
			$p->SetAttribute('altitude', $p->GetAttribute('weight') * $this->altitudeFactor);
		}
	}
	
	//----------------------------------------------------------------------------------------------
	function CalcLeaf($p)
	{
		if ($this->t->HasBranchLengths())
		{
			$p->SetAttribute('altitude',
				($this->max_path_length - $p->GetAttribute('path_length')) * 500 * $this->altitudeFactor);		
		}
		else
		{
			$p->SetAttribute('altitude', $p->GetAttribute('weight') * $this->altitudeFactor);
		}
	}		

	
	//----------------------------------------------------------------------------------------------
	function CalcCoordinates()
	{
		$this->max_path_length = 0.0;		
		$this->t->GetRoot()->SetAttribute('path_length', $this->t->GetRoot()->GetAttribute('edge_length'));

		// Get path lengths
		$n = new PreorderIterator ($this->t->getRoot());
		$q = $n->Begin();
		while ($q != NULL)
		{			
			$d = $q->GetAttribute('edge_length');
			if ($d < 0.00001)
			{
				$d = 0.0;
			}
        	if ($q != $this->t->GetRoot())
	    		$q->SetAttribute('path_length', $q->GetAncestor()->GetAttribute('path_length') + $d);

			$this->max_path_length = max($this->max_path_length, $q->GetAttribute('path_length'));
			$q = $n->Next();
		}

		$leaves = $this->t->GetNumLeaves();
		$this->leaf_count = 0;

		$n = new NodeIterator ($this->t->getRoot());
		
		$q = $n->Begin();
		while ($q != NULL)
		{
			
			if ($q->IsLeaf ())
			{
				$this->CalcLeaf ($q);				
			}
			else
			{
				$this->CalcInternal ($q);
			}
	
			$q = $n->Next();
		}
	}
	
	//----------------------------------------------------------------------------------------------
	function Draw($port)
	{	
		$stack = array();
		$curnode = $this->t->GetRoot();
		
		while ($curnode != NULL)
		{	
			if ($curnode->GetChild())
			{
				$this->kml .= "<Folder>\n";
				
				if ($curnode == $this->t->GetRoot())
				{
					$this->kml .=  "<name>Tree</name>\n";
				}
				else if ($curnode->GetLabel())
				{
					$this->kml .=  "<name>" . $curnode->GetLabel() . "</name>\n";
				}
				
				if ($curnode->IsLeaf())
				{	
					$this->DrawLeaf($curnode);
				}
				else
				{
					$this->DrawInternal($curnode);
				}
				
				$stack[] = $curnode;
				$curnode = $curnode->GetChild();
			}
			else
			{
				$this->kml .=  "<Folder>\n";
				if ($curnode->IsLeaf())
				{	
					$this->DrawLeaf($curnode);
				}
				else
				{
					$this->DrawInternal($curnode);
				}
				$this->kml .=  "</Folder>\n";	
										
				while (!empty($stack) && ($curnode->GetSibling() == NULL))
				{
					$this->kml .=  "</Folder>\n";	
					$curnode = array_pop($stack);
					
				}
				if (empty($stack))
				{
					$curnode = NULL;
				}
				else
				{
					$curnode = $curnode->GetSibling();
				}
			}		
		}
	

	}
	
	//----------------------------------------------------------------------------------------------
	// Code implicatly assumed tree is binary. If we have a polytomy we will have orphan nodes that
	// have vertical lines that don't have a horizontal connection (the left and right children will
	// be connected). Draw a line to connect these orphans to their ancestor
	//
	// Note use of !== to avoid "Nesting level too deep - recursive dependency?"
	// see http://www.richardlord.net/blog/php-nesting-level-too-deep-recursive-dependency
	//
	function PolytomyFix($p)
	{
		$q = $p->GetAncestor();
		if ($q)
		{
			if ($p !== $q->GetChild() && $p !==  $q->GetChild()->GetRightMostSibling())
			{
				// p is part of a polytomy, so we need to draw an additional arc connecting it to ancestor
				
				$lat1 = deg2rad($p->GetAttribute('lat'));
				$long1 = deg2rad($p->GetAttribute('long'));
		
				$lat2 = deg2rad($q->GetAttribute('lat'));
				$long2 = deg2rad($q->GetAttribute('long'));

				if (($lat1 == $lat2) && ($long1 == $long2))
				{
					$d = 0.0;
				}
				else
				{
					$d = acos(sin($lat1)*sin($lat2)+cos($lat1)*cos($lat2)*cos($long1-$long2));
				}
			
				if ($d == 0.0)
				{
					// do nothing
				}
				else
				{
					// arc from top of this node to bottom of ancestor node
					for ($frac = 0.0; $frac <= 1.0; $frac+= 0.1)
					{
						$A =sin((1-$frac)*$d)/sin($d);
						$B =sin($frac*$d)/sin($d);
						$x = $A*cos($lat1)*cos($long1) +  $B*cos($lat2)*cos($long2);
						$y = $A*cos($lat1)*sin($long1) +  $B*cos($lat2)*sin($long2);
						$z = $A*sin($lat1)            +  $B*sin($lat2);
						$lat=atan2($z,sqrt($x*$x+$y*$y));
						$long=atan2($y,$x);
						
						$this->kml .=  rad2deg($long) . "," . rad2deg($lat) . "," . $q->GetAttribute('altitude') . "\n";
					}
				
					
				}				
			}
		}
	
	}
	
	//----------------------------------------------------------------------------------------------
	function DrawLeaf($p)
	{
		$this->kml .=  "<Placemark>\n";
		$this->kml .=  "<styleUrl>#treeLine</styleUrl>\n";
		$this->kml .=  "<LineString>\n";
		$this->kml .=  "<altitudeMode>absolute</altitudeMode>\n";
		$this->kml .=  "<coordinates>\n";
		$this->kml .=  $p->GetAttribute('long') . "," . $p->GetAttribute('lat') . "," . $p->GetAttribute('altitude') . "\n";
		$this->kml .=  $p->GetAttribute('long') . "," . $p->GetAttribute('lat') . "," . $p->GetAncestor()->GetAttribute('altitude') . "\n";
		
		$this->PolytomyFix($p);		
		
		$this->kml .=  "</coordinates>\n";
		$this->kml .=  "</LineString>\n";
		$this->kml .=  "</Placemark>\n";
	}

	//----------------------------------------------------------------------------------------------
	function DrawInternal($p)
	{
		$this->kml .=  "<Placemark>\n";
		$this->kml .=  "<styleUrl>#treeLine</styleUrl>\n";
		$this->kml .=  "<LineString>\n";
		$this->kml .=  "<altitudeMode>absolute</altitudeMode>\n";
		$this->kml .=  "<coordinates>\n";
		
		$lat1 = deg2rad($p->GetChild()->GetAttribute('lat'));
		$long1 = deg2rad($p->GetChild()->GetAttribute('long'));

		$lat2 = deg2rad($p->GetChild()->GetRightMostSibling()->GetAttribute('lat'));
		$long2 = deg2rad($p->GetChild()->GetRightMostSibling()->GetAttribute('long'));
		
		
		if (($lat1 == $lat2) && ($long1 == $long2))
		{
			$d = 0.0;
		}
		else
		{
			$d = acos(sin($lat1)*sin($lat2)+cos($lat1)*cos($lat2)*cos($long1-$long2));
		}
	
		if ($d == 0.0)
		{
			// descendants are on same spot
			$this->kml .=  $p->GetAttribute('long') . "," . $p->GetAttribute('lat') . "," . $p->GetAttribute('altitude') . "\n";
			$this->kml .=  $p->GetAttribute('long') . "," . $p->GetAttribute('lat') . "," . $p->GetAncestor()->GetAttribute('altitude') . "\n";
		}
		else
		{
			for ($frac = 0.0; $frac <= 1.0; $frac+= 0.1)
			{
				$A =sin((1-$frac)*$d)/sin($d);
				$B =sin($frac*$d)/sin($d);
				$x = $A*cos($lat1)*cos($long1) +  $B*cos($lat2)*cos($long2);
				$y = $A*cos($lat1)*sin($long1) +  $B*cos($lat2)*sin($long2);
				$z = $A*sin($lat1)            +  $B*sin($lat2);
				$lat=atan2($z,sqrt($x*$x+$y*$y));
				$long=atan2($y,$x);
				
				$this->kml .=  rad2deg($long) . "," . rad2deg($lat) . "," . $p->GetAttribute('altitude') . "\n";
				
				
				if ($frac == 0.5)
				{
					// Draw clade stem
					if ($p->GetAncestor())
					{
						$this->kml .= $p->GetAttribute('long') . "," . $p->GetAttribute('lat') . "," . $p->GetAncestor()->GetAttribute('altitude') . "\n";					
						$this->kml .= $p->GetAttribute('long') . "," . $p->GetAttribute('lat') . "," . $p->GetAttribute('altitude') . "\n";
					}
				}
			}
		}
		
		$this->PolytomyFix($p);
		
		$this->kml .=  "</coordinates>\n";
		$this->kml .=  "</LineString>\n";
		$this->kml .=  "</Placemark>\n";
	}

	//----------------------------------------------------------------------------------------------
	function DrawScaleBar($port) {}
	
	
}	

?>